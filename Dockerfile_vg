FROM nvidia/cuda:10.1-cudnn7-devel-ubuntu18.04

ARG python=3.6
ENV PYTHON_VERSION=${python}
ENV NCCL_VERSION=2.4.8-1+cuda10.1
ENV TZ=Europe/London
ENV DEBIAN_FRONTEND=noninteractive
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

ARG PYTHON_BASEDEPS="build-essential python3-pip"
ARG PYTHON_BUILDDEPS="libbz2-dev \
  libc6-dev \
  libgdbm-dev \
  libncursesw5-dev \
  libreadline-gplv2-dev \
  libsqlite3-dev \
  libssl-dev \
  tk-dev"

RUN apt-get update && apt-get install -y --no-install-recommends \
  build-essential \
  cmake \
  curl \
  ca-certificates \
  libjpeg-dev \
  wget \
  libatlas-base-dev \
  libboost-all-dev \
  libgflags-dev \
  libgoogle-glog-dev \
  libhdf5-serial-dev \
  libleveldb-dev \
  liblmdb-dev \
  libnccl2=${NCCL_VERSION} \
  libnccl-dev=${NCCL_VERSION} \
  libopencv-dev \
  libprotobuf-dev \
  libsnappy-dev \
  protobuf-compiler \
  python${PYTHON_VERSION} \
  python${PYTHON_VERSION}-dev \
  libpng-dev \ 
  gcc \
  g++ \ 
  make \  
  $PYTHON_BASEDEPS \ 
  $PYTHON_BUILDDEPS \ 
  nano

RUN curl -O https://bootstrap.pypa.io/get-pip.py && \
  python${PYTHON_VERSION} get-pip.py && \
  rm get-pip.py

RUN ln -sf /usr/bin/python3.6 /usr/bin/python
ENV LD_LIBRARY_PATH $LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu
ENV CPLUS_INCLUDE_PATH="$CPLUS_INCLUDE_PATH:/usr/include/python3.6/"

ENV CAFFE_ROOT=/opt/caffe
WORKDIR $CAFFE_ROOT
COPY ./caffe .
RUN cp Makefile.config.example Makefile.config
RUN for req in $(cat python/requirements.txt) pydot; do pip install $req; done 

RUN make clean && make  all -j "$(nproc)" && \
  make pycaffe

RUN make test -j "$(nproc)" 

ENV PYCAFFE_ROOT $CAFFE_ROOT/python
ENV PYTHONPATH $PYCAFFE_ROOT:$PYTHONPATH
ENV PATH $CAFFE_ROOT/build/tools:$PYCAFFE_ROOT:$PATH
RUN echo "$CAFFE_ROOT/build/lib" >> /etc/ld.so.conf.d/caffe.conf && ldconfig
ENV CFLAGS="-Wno-narrowing"

# # pip packages
RUN pip install --trusted-host pypi.python.org \
  Cython \
  h5py \
  ipython \
  scipy \
  tqdm \
  cld2-cffi \
  jupyterlab \
  easydict \
  opencv-python

COPY . /workspace
WORKDIR /workspace/lib
RUN python setup.py build_ext --inplace && python setup.py install
ENV PYTHONPATH /workspace/lib:$PYTHONPATH

# Just create a directory to dump output files.
RUN mkdir /outputs

# Expose a port for jupyter lab.
EXPOSE 8880

WORKDIR /workspace
